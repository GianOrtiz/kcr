/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CheckpointSpec defines the desired state of Checkpoint.
type CheckpointSpec struct {
	// Important: Run "make" to regenerate code after modifying this file

	// Schedule is the cron expression from the parent CheckpointSchedule
	Schedule string `json:"schedule,omitempty"`

	// Selector is the same selector as the CheckpointSchedule,
	// used to identify the pods that were checkpointed
	Selector *metav1.LabelSelector `json:"selector,omitempty"`

	// CheckpointData contains the location of the checkpoint data
	// generated by the kubelet API
	CheckpointData string `json:"checkpointData,omitempty"`

	// CheckpointTimestamp is the time when the checkpoint was created
	CheckpointTimestamp *metav1.Time `json:"checkpointTimestamp,omitempty"`

	// CheckpointID is the unique identifier for this checkpoint
	CheckpointID string `json:"checkpointID,omitempty"`

	// CheckpointScheduleRef is a reference to the parent CheckpointSchedule resource
	// that triggered this checkpoint creation
	CheckpointScheduleRef *corev1.ObjectReference `json:"checkpointScheduleRef,omitempty"`

	// NodeName is the name of the node where the checkpoint was created
	// and where the checkpoint data is stored
	NodeName string `json:"nodeName,omitempty"`
}

// CheckpointStatus defines the observed state of Checkpoint.
type CheckpointStatus struct {
	// Important: Run "make" to regenerate code after modifying this file

	// CheckpointImage is the reference to the image created from the checkpoint data
	// This field is populated by the checkpoint controller after creating the image
	CheckpointImage string `json:"checkpointImage,omitempty"`

	// Phase represents the current phase of the checkpoint (Created, ImageBuilt, Failed)
	// +kubebuilder:validation:Enum=Created;ImageBuilt;Failed
	Phase string `json:"phase,omitempty"`

	// Conditions represents the latest available observations of the checkpoint's current state
	Conditions []metav1.Condition `json:"conditions,omitempty"`

	// LastTransitionTime is the last time the status changed from one status to another
	LastTransitionTime *metav1.Time `json:"lastTransitionTime,omitempty"`

	// FailedReason is the message for the reason the checkpoint failed.
	FailedReason string `json:"failedReason,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status

// Checkpoint is the Schema for the checkpoints API.
type Checkpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   CheckpointSpec   `json:"spec,omitempty"`
	Status CheckpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckpointList contains a list of Checkpoint.
type CheckpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Checkpoint `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Checkpoint{}, &CheckpointList{})
}
